plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

apply from: "../config/git-version.gradle"

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.mgg.environmentcheck"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"
        versionCode gitVersionCode
        versionName gitVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DFLATBUFFERS_SRC=${rootProject.projectDir}/third_party/flatbuffers"
                arguments "-DANDROID_STL=c++_shared"
                cppFlags '-std=c++17 -Wunused-function'
            }
        }
    }

    buildTypes {
        debug {
            // 为了不和 release 版本冲突
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
    buildFeatures.prefab = true
    buildFeatures {
        viewBinding true
        prefab true
    }
    namespace 'com.mgg.environmentcheck'

    task generateFbsCpp(type: Exec) {
        def inputDir = file("$projectDir/src/main/fbs")
        def outputCppDir = file("$projectDir/src/main/cpp/generated/")
        def fbsFiles = layout.files { file(inputDir).listFiles() }.filter { File f -> f.name.endsWith(".fbs") }.toList()
        ignoreExitValue(true)

        standardOutput = new ByteArrayOutputStream()
        errorOutput = new ByteArrayOutputStream()
        def commandLineArgs = ['flatc', '-o', outputCppDir, '--cpp']
        fbsFiles.forEach{
            commandLineArgs.add(it.path)
        }
        commandLine commandLineArgs

        doFirst {
            delete "$outputCppDir/"
            mkdir "$outputCppDir/"
        }
        doLast {
            if (execResult.getExitValue() != 0) {
                println(standardOutput.toString())
                throw new GradleException("flatc command line failed")
            }
        }
    }

    task generateFbsKotlin(type: Exec) {
        def inputDir = file("$projectDir/src/main/fbs")
        def outputKotlinDir = file("$projectDir/src/main/java/generated/")
        def fbsFiles = layout.files { file(inputDir).listFiles() }.filter { File f -> f.name.endsWith(".fbs") }.toList()
        ignoreExitValue(true)

        standardOutput = new ByteArrayOutputStream()
        errorOutput = new ByteArrayOutputStream()
        def commandLineArgs = ['flatc', '-o', outputKotlinDir, '--kotlin']
        fbsFiles.forEach{
            commandLineArgs.add(it.path)
        }
        commandLine commandLineArgs

        doFirst {
            delete "$outputKotlinDir/"
            mkdir "$outputKotlinDir/"
        }
        doLast {
            if (execResult.getExitValue() != 0) {
                println(standardOutput.toString())
                throw new GradleException("flatc command line failed")
            }
        }
    }

    afterEvaluate {
        android.applicationVariants.all { variant ->
            variant.javaCompiler.dependsOn(generateFbsKotlin)
            variant.javaCompiler.dependsOn(generateFbsCpp)
        }
    }

    /*flavorDimensions "stl-variant"
    productFlavors {
        gnustl {
            dimension "stl-variant"
            applicationIdSuffix ".gnustl"
            versionNameSuffix "-gnustl"
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_STL=gnustl_static"
                }
            }
        }
        libcpp {
            dimension "stl-variant"
            applicationIdSuffix ".libcpp"
            versionNameSuffix "-libcpp"
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_STL=c++_static"
                }
            }
        }
    }*/
}
/*configurations.all {
    exclude(group = "androidx.appcompat", module = "appcompat")
    exclude("org.jetbrains.kotlin", "kotlin-stdlib-jdk7")
    exclude("org.jetbrains.kotlin", "kotlin-stdlib-jdk8")
}*/
/*configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.1.0'
            }
        }
    }
}*/
dependencies {
    def lifecycle_version = "2.4.1"
    implementation project(":CheckEnv")
    implementation project(":Core")
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // ViewModel utilities for Compose
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation 'io.reactivex.rxjava3:rxjava:3.1.5'

    implementation 'com.google.crypto.tink:tink-android:1.6.1'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'
    implementation 'com.google.flatbuffers:flatbuffers-java:2.0.0'
    implementation 'com.github.getActivity:ToastUtils:10.5'
    implementation "com.github.skydoves:lazybones:1.0.4"
    implementation "com.github.skydoves:lazybones-viewmodel:1.0.4"

    // https://mvnrepository.com/artifact/com.android.ndk.thirdparty
    implementation "com.android.ndk.thirdparty:curl:7.79.1-beta-1"
    implementation "com.android.ndk.thirdparty:jsoncpp:1.9.5-beta-1"
    implementation "com.android.ndk.thirdparty:openssl:1.1.1l-beta-1"
    implementation 'com.android.ndk.thirdparty:libpng:1.6.37-alpha-1'

    // implementation 'com.android.encryption:aes:1.0.0'
}
