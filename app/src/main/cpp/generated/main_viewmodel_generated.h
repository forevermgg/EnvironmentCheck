// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAINVIEWMODEL_COM_FBS_APP_MAIN_VIEWMODEL_H_
#define FLATBUFFERS_GENERATED_MAINVIEWMODEL_COM_FBS_APP_MAIN_VIEWMODEL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace com {
namespace fbs {
namespace app {
namespace main {
namespace viewmodel {

struct UiData;
struct UiDataBuilder;

struct ShowEmpty;
struct ShowEmptyBuilder;

struct ShowError;
struct ShowErrorBuilder;

enum Click : int32_t {
  Click_TEST = 0,
  Click_MIN = Click_TEST,
  Click_MAX = Click_TEST
};

inline const Click (&EnumValuesClick())[1] {
  static const Click values[] = {
    Click_TEST
  };
  return values;
}

inline const char * const *EnumNamesClick() {
  static const char * const names[2] = {
    "TEST",
    nullptr
  };
  return names;
}

inline const char *EnumNameClick(Click e) {
  if (flatbuffers::IsOutRange(e, Click_TEST, Click_TEST)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesClick()[index];
}

enum Property : int32_t {
  Property_UI_DATA = 0,
  Property_SHOW_EMPTY = 1,
  Property_SHOW_ERROR = 2,
  Property_SHOW_TOAST = 3,
  Property_MIN = Property_UI_DATA,
  Property_MAX = Property_SHOW_TOAST
};

inline const Property (&EnumValuesProperty())[4] {
  static const Property values[] = {
    Property_UI_DATA,
    Property_SHOW_EMPTY,
    Property_SHOW_ERROR,
    Property_SHOW_TOAST
  };
  return values;
}

inline const char * const *EnumNamesProperty() {
  static const char * const names[5] = {
    "UI_DATA",
    "SHOW_EMPTY",
    "SHOW_ERROR",
    "SHOW_TOAST",
    nullptr
  };
  return names;
}

inline const char *EnumNameProperty(Property e) {
  if (flatbuffers::IsOutRange(e, Property_UI_DATA, Property_SHOW_TOAST)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesProperty()[index];
}

struct UiData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UiDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT = 4
  };
  const flatbuffers::String *content() const {
    return GetPointer<const flatbuffers::String *>(VT_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyString(content()) &&
           verifier.EndTable();
  }
};

struct UiDataBuilder {
  typedef UiData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::String> content) {
    fbb_.AddOffset(UiData::VT_CONTENT, content);
  }
  explicit UiDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UiData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UiData>(end);
    return o;
  }
};

inline flatbuffers::Offset<UiData> CreateUiData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> content = 0) {
  UiDataBuilder builder_(_fbb);
  builder_.add_content(content);
  return builder_.Finish();
}

inline flatbuffers::Offset<UiData> CreateUiDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *content = nullptr) {
  auto content__ = content ? _fbb.CreateString(content) : 0;
  return com::fbs::app::main::viewmodel::CreateUiData(
      _fbb,
      content__);
}

struct ShowEmpty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShowEmptyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT = 4
  };
  const flatbuffers::String *content() const {
    return GetPointer<const flatbuffers::String *>(VT_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyString(content()) &&
           verifier.EndTable();
  }
};

struct ShowEmptyBuilder {
  typedef ShowEmpty Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::String> content) {
    fbb_.AddOffset(ShowEmpty::VT_CONTENT, content);
  }
  explicit ShowEmptyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ShowEmpty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShowEmpty>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShowEmpty> CreateShowEmpty(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> content = 0) {
  ShowEmptyBuilder builder_(_fbb);
  builder_.add_content(content);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShowEmpty> CreateShowEmptyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *content = nullptr) {
  auto content__ = content ? _fbb.CreateString(content) : 0;
  return com::fbs::app::main::viewmodel::CreateShowEmpty(
      _fbb,
      content__);
}

struct ShowError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShowErrorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT = 4
  };
  const flatbuffers::String *content() const {
    return GetPointer<const flatbuffers::String *>(VT_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyString(content()) &&
           verifier.EndTable();
  }
};

struct ShowErrorBuilder {
  typedef ShowError Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::String> content) {
    fbb_.AddOffset(ShowError::VT_CONTENT, content);
  }
  explicit ShowErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ShowError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShowError>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShowError> CreateShowError(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> content = 0) {
  ShowErrorBuilder builder_(_fbb);
  builder_.add_content(content);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShowError> CreateShowErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *content = nullptr) {
  auto content__ = content ? _fbb.CreateString(content) : 0;
  return com::fbs::app::main::viewmodel::CreateShowError(
      _fbb,
      content__);
}

inline const com::fbs::app::main::viewmodel::UiData *GetUiData(const void *buf) {
  return flatbuffers::GetRoot<com::fbs::app::main::viewmodel::UiData>(buf);
}

inline const com::fbs::app::main::viewmodel::UiData *GetSizePrefixedUiData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<com::fbs::app::main::viewmodel::UiData>(buf);
}

inline bool VerifyUiDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<com::fbs::app::main::viewmodel::UiData>(nullptr);
}

inline bool VerifySizePrefixedUiDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<com::fbs::app::main::viewmodel::UiData>(nullptr);
}

inline void FinishUiDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::fbs::app::main::viewmodel::UiData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUiDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::fbs::app::main::viewmodel::UiData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace viewmodel
}  // namespace main
}  // namespace app
}  // namespace fbs
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_MAINVIEWMODEL_COM_FBS_APP_MAIN_VIEWMODEL_H_
