// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_LOADINGVIEW_COM_FBS_APP_LOADING_H_
#define FLATBUFFERS_GENERATED_LOADINGVIEW_COM_FBS_APP_LOADING_H_

#include "flatbuffers/flatbuffers.h"

namespace com {
namespace fbs {
namespace app {
namespace loading {

struct LoadingViewParams;
struct LoadingViewParamsBuilder;

struct LoadingViewParams FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoadingViewParamsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT = 4,
    VT_SHOW = 6
  };
  const flatbuffers::String *content() const {
    return GetPointer<const flatbuffers::String *>(VT_CONTENT);
  }
  int8_t show() const { return GetField<int8_t>(VT_SHOW, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyString(content()) &&
           VerifyField<int8_t>(verifier, VT_SHOW, 1) && verifier.EndTable();
  }
};

struct LoadingViewParamsBuilder {
  typedef LoadingViewParams Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::String> content) {
    fbb_.AddOffset(LoadingViewParams::VT_CONTENT, content);
  }
  void add_show(int8_t show) {
    fbb_.AddElement<int8_t>(LoadingViewParams::VT_SHOW, show, 0);
  }
  explicit LoadingViewParamsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LoadingViewParams> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoadingViewParams>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoadingViewParams> CreateLoadingViewParams(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> content = 0, int8_t show = 0) {
  LoadingViewParamsBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_show(show);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoadingViewParams> CreateLoadingViewParamsDirect(
    flatbuffers::FlatBufferBuilder &_fbb, const char *content = nullptr,
    int8_t show = 0) {
  auto content__ = content ? _fbb.CreateString(content) : 0;
  return com::fbs::app::loading::CreateLoadingViewParams(_fbb, content__, show);
}

inline const com::fbs::app::loading::LoadingViewParams *GetLoadingViewParams(
    const void *buf) {
  return flatbuffers::GetRoot<com::fbs::app::loading::LoadingViewParams>(buf);
}

inline const com::fbs::app::loading::LoadingViewParams *
GetSizePrefixedLoadingViewParams(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<
      com::fbs::app::loading::LoadingViewParams>(buf);
}

inline bool VerifyLoadingViewParamsBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<com::fbs::app::loading::LoadingViewParams>(
      nullptr);
}

inline bool VerifySizePrefixedLoadingViewParamsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier
      .VerifySizePrefixedBuffer<com::fbs::app::loading::LoadingViewParams>(
          nullptr);
}

inline void FinishLoadingViewParamsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::fbs::app::loading::LoadingViewParams> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLoadingViewParamsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::fbs::app::loading::LoadingViewParams> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace loading
}  // namespace app
}  // namespace fbs
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_LOADINGVIEW_COM_FBS_APP_LOADING_H_
